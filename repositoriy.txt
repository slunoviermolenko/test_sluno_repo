

--------------------------------------------------
Что выкладываем: (клиент/сущность - отдельный репозиторий (каталог) например lvivcold/java; lvivcold/pc; lvivcold/batches; lvivcold/db; lvivcold/gwm)
--------------------------------------------------
java (gold) (prod,dev,acc(?),modification
pc (prod,dev)
batches (prod,dev)
db(что именно - уточняем)  (prod,dev)
gwm(что именно - уточняем) (prod,dev)
--------------------------------------------------	
Система веток
--------------------------------------------------	
постояннные:					назначение:													    				источники изменений:

MASTER==PROD					код , который можно задеплоить на prod, 									изменения только с ACC + хот-фиксы.
--ACC (?)						код для приемного тестирования. 											изменения только с DEV + хот-фиксы.
DEV								код для совместного тестирования.											изменения из веток модификаций + хот-фиксы.
временные:
MODIFICATION 					код для индивидуального тестирования. 										локальные изменения участников модификации.
(1 модификация (или проект из нескольких модификаций, например FV) = 1 временная ветка)
--------------------------------------------------	
Work-flow GIT
--------------------------------------------------	
java,batches,pc,gwm
закончили локальное тестирование - переносим изменения MODIFICATION->DEV.
закончили тестирование на DEV - переносим изменения DEV->ACC(PROD)
закончили тестирование на ACC - переносим изменения на PROD.
db
перед началом разработки закачиваем объект на DEV и PROD из соответствующих окружений. должны быть одинаковыми. Если нет - устраняем конфликты. 
Дальше все как для прочих типов исходников.
hot-fixes на проде возможен только для batches,DB, gwm(java-script) 
	batches,gwm: необходимо залить на git hot-fix. 
	DB: необходимо залить на GIT prod-версию модифицируемого объекта до начала работы над hot-fix. 

-------------------------------------
Перед началом работы над модификацией
-------------------------------------
перед началом работы над модификацией кодифицируемый код должен лежать в GIT. 
если кода в cvs нет - создаем новый репозиторий и три ветки - master,dev и асс
если код есть - затягиваем к себе нужное, то, что планируется модифицировать. проверяем на компилируемость. 
	если не компилируется - добиваемся компилируемости, ставим тег, обновляем все ветки. только после этого начинаем модификацию.
	
В процессе работы над модификацией	
-------------------------------------
создаем ветку модификации правило наименования - код проекта, код модификации. Если проект состоит из нескольких модификаций - одна ветка на проект или несколько - по ситуации. 
Любой код в рамках модификации чекинится в ветку модификации.
Выкладываем в cvs только компилируемый код. 


Нерешенные вопросы
-------------------------------------
java
Подготовка jar для ACC & PROD
	- cкачали из GIT код на dev для нужного окружения, сбилдили, выложили на окружение. 
	- в чем проблема глобальная: неизвестно что на проде, нельзя переносить все JAR DEV->ACC ; ACC-> PROD. только измененные.
		- вариант решения - сравнивать между собой декомпилированный из jar-файлов java-код на dev-acc-prod. Если совпадает, считать, что версия java кода на ACC, PROD такая же как на DEV.
			- если не совпадает? помечать специальным тегом, на который необходимо обращать внимание в процессе разработки и тестирования.
db
Сохранение объектов DB в GIT.
	- перед тем как выкладывать новую версию объектов и патч в git, сначала выкладываем в гит соотв. версию из прод. в процессе установки патча
Что делать с нелегальным кодом , который не проходит через GIT.



















